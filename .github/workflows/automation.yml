name: PLP Login Automation

on:
  workflow_dispatch:

jobs:
  infinite_login:
    runs-on: ubuntu-latest
    timeout-minutes: 43200  # 30 days

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp python-dotenv

      - name: Write and run resilient infinite script
        env:
          PLP_EMAIL: ${{ secrets.PLP_EMAIL }}
          PLP_PASSWORD: ${{ secrets.PLP_PASSWORD }}
        run: |
          cat <<EOF > login_runner.py
import asyncio
import aiohttp
import logging
import os
import time

POST_URL = "https://your-api-url.com/login"  # Replace with real endpoint
EMAIL = os.getenv("PLP_EMAIL")
PASSWORD = os.getenv("PLP_PASSWORD")

logging.basicConfig(
    filename="automation.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)

class LoginAutomation:
    def __init__(self):
        self.session = None

    async def post_message(self):
        payload = {"email": EMAIL, "password": PASSWORD}
        headers = {"Content-Type": "application/json"}
        async with self.session.post(POST_URL, json=payload, headers=headers) as response:
            if response.status == 200:
                logging.info("‚úÖ Post created successfully.")
            else:
                logging.warning(f"‚ö†Ô∏è Server responded: {response.status} - {await response.text()}")

    async def run_forever(self):
        connector = aiohttp.TCPConnector(limit=0)
        timeout = aiohttp.ClientTimeout(total=None)
        async with aiohttp.ClientSession(connector=connector, timeout=timeout) as self.session:
            while True:
                try:
                    await self.post_message()
                    await asyncio.sleep(0.001)
                except aiohttp.ClientError as e:
                    logging.warning(f"‚ùå Client error: {e}")
                    await asyncio.sleep(1)
                except Exception as e:
                    logging.error(f"üî• Unexpected error: {e}", exc_info=True)
                    await asyncio.sleep(2)

if __name__ == "__main__":
    while True:
        try:
            asyncio.run(LoginAutomation().run_forever())
        except Exception as e:
            logging.critical(f"üí• Fatal error in main loop: {e}", exc_info=True)
            time.sleep(3)
EOF

          python login_runner.py

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: automation-logs-${{ github.run_id }}
          path: automation.log
          retention-days: 7
